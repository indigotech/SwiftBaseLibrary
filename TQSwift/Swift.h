// Header generated by RemObjects Elements for Cocoa 

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#import <objc/NSObject.h>
#import <Foundation/Foundation.h>
#import <dispatch/object.h>
#import <dispatch/group.h>
#import <dispatch/queue.h>
#import <inttypes.h>

@protocol _CocoaArrayType;
@protocol ICustomStringConvertible;
@protocol ICustomDebugStringConvertible;
@protocol IRawRepresentable;
@protocol IErrorType;
@protocol IHashable;
@protocol IOutputStreamType;
@protocol IStreamable;
@protocol INonLazySequence;
@class __Extension_INonLazySequence;
@protocol IntervalType;
@class ClosedInterval;
@class HalfOpenInterval;
@class __Extension_UInt8;
@class __Extension_UInt16;
@class __Extension_UInt32;
@class __Extension_UInt64;
@class __Extension_Int8;
@class __Extension_Int16;
@class __Extension_Int32;
@class __Extension_Int64;
@class __Extension_Int3210;
@class __Extension_Int3211;
@class __Extension_Int3212;
@class __Extension_Int6413;
@class __Extension_Float;
@class __Extension_Double;
@class __Extension_UInt6416;
@protocol Equatable;
@protocol Comparable;
@protocol Incrementable;
@protocol BooleanType;
@protocol IntegerArithmeticType;
@protocol BitwiseOperationsType;
@protocol ISignedNumberType;
@protocol AbsoluteValuable;
@protocol ISignedIntegerType;
@protocol IUnsignedIntegerType;
@protocol ForwardIndexType;
@protocol BidirectionalIndexType;
@protocol ReverseIndexType;
@protocol Strideable;
@protocol RandomAccessIndexType;
@protocol IntegerType;
@protocol Indexable;
@protocol CollectionType;
@protocol ISliceable;
@class DispatchObject;
@class DispatchQueue;
@class __Extension_ISequence;
@class __Extension_NSDictionary22;
@class Dictionary;
@class DictionaryHelper;
@class Array;
@class Range;
@protocol IArrayLiteralConvertible;
@protocol IBooleanLiteralConvertible;
@protocol IDictionaryLiteralConvertible;
@protocol IExtendedGraphemeClusterLiteralConvertible;
@protocol IFloatLiteralConvertible;
@protocol IIntegerLiteralConvertible;
@protocol INilLiteralConvertible;
@protocol IStringLiteralConvertible;
@protocol IStringInterpolationConvertible;
@protocol IUnicodeScalarLiteralConvertible;
@class Set;
@class CharacterView;
@class UTF16CharacterView;
@class UTF32CharacterView;
@class UTF8CharacterView;
@class __Extension_UnicodeScalar;
@class $anonymoustype$26;

typedef enum Bit: int32_t {
    Bit_Zero = 0,
    Bit_One = 1
  } Bit;

typedef struct DispatchPredicate DispatchPredicate;
typedef enum GlobalAttributes: int32_t {
    GlobalAttributes_qosUserInteractive = 33,
    GlobalAttributes_qosUserInitiated = 25,
    GlobalAttributes_qosDefault = 21,
    GlobalAttributes_qosUtility = 17,
    GlobalAttributes_qosBackground = 9,
    GlobalAttributes_qosUnspecified = 0,
    GlobalAttributes_Background = -32768,
    GlobalAttributes_Default = 0,
    GlobalAttributes_High = 2,
    GlobalAttributes_Low = -2
  } GlobalAttributes;

typedef struct DispatchWorkItemFlags DispatchWorkItemFlags;
typedef struct MachSendEvent MachSendEvent;
typedef struct MemoryPressureEvent MemoryPressureEvent;
typedef struct ProcessEvent ProcessEvent;
typedef struct TimerFlags TimerFlags;
typedef struct FileSystemEvent FileSystemEvent;
typedef struct DispatchData DispatchData;
typedef struct DispatchDataIterator DispatchDataIterator;
typedef struct DispatchQoS DispatchQoS;
typedef enum QoSClass: int32_t {
    QoSClass_background = 9,
    QoSClass_utility = 17,
    QoSClass_defaultQoS = 21,
    QoSClass_userInitiated = 25,
    QoSClass_userInteractive = 33,
    QoSClass_unspecified = 0
  } QoSClass;

typedef struct DispatchQueueAttributes DispatchQueueAttributes;
typedef struct DispatchTime DispatchTime;
typedef struct DispatchWallTime DispatchWallTime;
typedef struct DispatchTimeInterval DispatchTimeInterval;
typedef Swift.CustomStringConvertible CustomStringConvertible
typedef Swift.CustomDebugStringConvertible CustomDebugStringConvertible
typedef Swift.RawRepresentable RawRepresentable
typedef Swift.ErrorType ErrorType
typedef Swift.Hashable Hashable
typedef Swift.OutputStreamType OutputStreamType
typedef Swift.Streamable Streamable
typedef Swift.IIntervalType IIntervalType
typedef Swift.IIncrementable IIncrementable
typedef Swift.IBooleanType IBooleanType
typedef Swift.SignedNumberType SignedNumberType
typedef Swift.SignedIntegerType SignedIntegerType
typedef Swift.UnsignedIntegerType UnsignedIntegerType
typedef Swift.ISequenceType ISequenceType
typedef Swift.SequenceType SequenceType
typedef Swift.ILazySequenceType ILazySequenceType
typedef Swift.LazySequenceType LazySequenceType
typedef Swift.ILazySequence ILazySequence
typedef Swift.IIndexable IIndexable
typedef Swift.ICollectionType ICollectionType
typedef Swift.Sliceable Sliceable
typedef Swift.NSObject NSObject
typedef Swift.Int Int
typedef Swift.UInt UInt
typedef Swift.Int8 Int8
typedef Swift.UInt8 UInt8
typedef Swift.IntMax IntMax
typedef Swift.UIntMax UIntMax
typedef Swift.Bool Bool
typedef Swift.Character Character
typedef Swift.UnicodeScalar UnicodeScalar
typedef Swift.UTF16Char UTF16Char
typedef Swift.UTF32Char UTF32Char
typedef Swift.UTF8Char UTF8Char
typedef Swift.StaticString StaticString
typedef Swift.Float Float
typedef Swift.Float32 Float32
typedef Swift.Float64 Float64
typedef Swift.Any Any
typedef Swift.AnyObject AnyObject
typedef Swift.AnyClass AnyClass
typedef Swift.Selector Selector
typedef Swift.BooleanLiteralType BooleanLiteralType
typedef Swift.CBool CBool
typedef Swift.CChar CChar
typedef Swift.CChar16 CChar16
typedef Swift.CChar32 CChar32
typedef Swift.CDouble CDouble
typedef Swift.CFloat CFloat
typedef Swift.CInt CInt
typedef Swift.CLong CLong
typedef Swift.CLongLong CLongLong
typedef Swift.COpaquePointer COpaquePointer
typedef Swift.CShort CShort
typedef Swift.CSignedChar CSignedChar
typedef Swift.CUnsignedChar CUnsignedChar
typedef Swift.CUnsignedInt CUnsignedInt
typedef Swift.CUnsignedLong CUnsignedLong
typedef Swift.CUnsignedLongLong CUnsignedLongLong
typedef Swift.CUnsignedShort CUnsignedShort
typedef Swift.CWideChar CWideChar
typedef Swift.ExtendedGraphemeClusterType ExtendedGraphemeClusterType
typedef Swift.FloatLiteralType FloatLiteralType
typedef Swift.IntegerLiteralType IntegerLiteralType
typedef Swift.StringLiteralType StringLiteralType
typedef Swift.UWord UWord
typedef Swift.UnicodeScalarType UnicodeScalarType
typedef Swift.Word Word
typedef Swift.ArrayLiteralConvertible ArrayLiteralConvertible
typedef Swift.BooleanLiteralConvertible BooleanLiteralConvertible
typedef Swift.DictionaryLiteralConvertible DictionaryLiteralConvertible
typedef Swift.FloatLiteralConvertible FloatLiteralConvertible
typedef Swift.IntegerLiteralConvertible IntegerLiteralConvertible
typedef Swift.NilLiteralConvertible NilLiteralConvertible
typedef Swift.StringLiteralConvertible StringLiteralConvertible
typedef Swift.StringInterpolationConvertible StringInterpolationConvertible
typedef Swift.UnicodeScalarLiteralConvertible UnicodeScalarLiteralConvertible
@protocol _CocoaArrayType
- (id_Nonnull )objectAtIndex:(int64_t_Nonnull )index;

@property (nonnull,readonly,assign) int64_t count;
@end

@protocol ICustomStringConvertible

@property (readonly,strong) NSString *description;
@end

@protocol ICustomDebugStringConvertible

@property (readonly,strong) NSString *debugDescription;
@end

@protocol IErrorType
@end

@protocol IHashable

@property (nonnull,readonly,assign) int64_t hashValue;
@end

@protocol IOutputStreamType
- (void)write:(NSString *_Nonnull )string;
@end

@protocol IStreamable
- (void)writeTo:(id<IOutputStreamType>_Nonnull )target;
@end

@protocol Equatable
+ (BOOL_Nonnull )op_Equality:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
@end

@protocol Comparable <Equatable>
+ (BOOL_Nonnull )op_LessThan:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (BOOL_Nonnull )op_LessThanOrEqual:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (BOOL_Nonnull )op_GreaterThanOrEqual:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (BOOL_Nonnull )op_GreaterThan:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
@end

@protocol Incrementable <Equatable>
- (instancetype_Nonnull )successor;
@end

@protocol BooleanType

@property (nonnull,readonly,assign) BOOL boolValue;
@end

@protocol IntegerArithmeticType <Comparable>
+ (instancetype_Nonnull )op_Addition:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (instancetype_Nonnull )op_Subtraction:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (instancetype_Nonnull )op_Multiply:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (instancetype_Nonnull )op_Division:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
+ (instancetype_Nonnull )op_Modulus:(instancetype_Nonnull )lhs :(instancetype_Nonnull )rhs;
- (int64_t_Nonnull )toIntMax;
@end

@protocol BitwiseOperationsType
+ (instancetype_Nonnull )op_BitwiseOr:(instancetype_Nonnull ) :(instancetype_Nonnull );
+ (instancetype_Nonnull )op_ExclusiveOr:(instancetype_Nonnull ) :(instancetype_Nonnull );
+ (instancetype_Nonnull )op_OnesComplement:(instancetype_Nonnull );
@end

@protocol ISignedIntegerType
- (id_Nonnull )init:(int64_t_Nonnull )value;
- (int64_t_Nonnull )toIntMax;
@end

@protocol IUnsignedIntegerType
- (id_Nonnull )init:(uint64_t_Nonnull )value;
- (uint64_t_Nonnull )toUIntMax;
@end

@protocol INilLiteralConvertible
@end

@interface ClosedInterval: NSObject

- (/* mapped */ id<NSFastEnumeration>_Nonnull )GetSequence;

@property (nonnull,readonly,assign) BOOL isEmpty;
@property (nonnull,readonly,assign) int64_t end;
@property (nonnull,readonly,assign) int64_t start;

@end

@interface HalfOpenInterval: NSObject

- (/* mapped */ id<NSFastEnumeration>_Nonnull )GetSequence;

@property (nonnull,readonly,assign) BOOL isEmpty;
@property (nonnull,readonly,assign) int64_t end;
@property (nonnull,readonly,assign) int64_t start;

@end

@interface __Extension_UInt8: uint8_t


@end

#define __Extension_UInt8_max 255
#define __Extension_UInt8_min 0
#define __Extension_UInt8_allZeros 0

@interface __Extension_UInt16: uint16_t


@end

#define __Extension_UInt16_max 65535
#define __Extension_UInt16_min 0
#define __Extension_UInt16_allZeros 0

@interface __Extension_UInt32: uint32_t


@end

#define __Extension_UInt32_max -1
#define __Extension_UInt32_min 0
#define __Extension_UInt32_allZeros 0

@interface __Extension_UInt64: uint64_t


@end

#define __Extension_UInt64_max -1
#define __Extension_UInt64_min 0
#define __Extension_UInt64_allZeros 0

@interface __Extension_Int8: int8_t


@end

#define __Extension_Int8_max 127
#define __Extension_Int8_min -128
#define __Extension_Int8_allZeros 0

@interface __Extension_Int16: int16_t


@end

#define __Extension_Int16_max 32767
#define __Extension_Int16_min -32768
#define __Extension_Int16_allZeros 0

@interface __Extension_Int32: int32_t


@end

#define __Extension_Int32_max 2147483647
#define __Extension_Int32_min -2147483648
#define __Extension_Int32_allZeros 0

@interface __Extension_Int64: int64_t


@end

#define __Extension_Int64_max 9223372036854775807
#define __Extension_Int64_min -9223372036854775808
#define __Extension_Int64_allZeros 0

@interface __Extension_Int3210: int32_t

+ (ClosedInterval *_Nonnull )op_DotDotDot:(int32_t_Nonnull )a :(int32_t_Nonnull )b;
+ (ClosedInterval *_Nonnull )op_DotDotDot:(int64_t_Nonnull )a :(int32_t_Nonnull )b;
+ (ClosedInterval *_Nonnull )op_DotDotDot:(int32_t_Nonnull )a :(int64_t_Nonnull )b;
+ (HalfOpenInterval *_Nonnull )op_DotDotLt:(int32_t_Nonnull )a :(int32_t_Nonnull )b;
+ (HalfOpenInterval *_Nonnull )op_DotDotLt:(int64_t_Nonnull )a :(int32_t_Nonnull )b;
+ (HalfOpenInterval *_Nonnull )op_DotDotLt:(int32_t_Nonnull )a :(int64_t_Nonnull )b;

@end

@interface __Extension_Int3211: int32_t


@end

@interface __Extension_Int3212: int32_t

+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(int32_t)self through:(int32_t_Nonnull )through by:(int32_t_Nonnull )by;
+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(int32_t)self to:(int32_t_Nonnull )to by:(int32_t_Nonnull )by;

@end

@interface __Extension_Int6413: int64_t

+ (ClosedInterval *_Nonnull )op_DotDotDot:(int64_t_Nonnull )a :(int64_t_Nonnull )b;
+ (HalfOpenInterval *_Nonnull )op_DotDotLt:(int64_t_Nonnull )a :(int64_t_Nonnull )b;
+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(int64_t)self through:(int64_t_Nonnull )through by:(int64_t_Nonnull )by;
+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(int64_t)self to:(int64_t_Nonnull )to by:(int64_t_Nonnull )by;

@end

@interface __Extension_Float: float

+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(float)self through:(float_Nonnull )through by:(float_Nonnull )by;
+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(float)self to:(float_Nonnull )to by:(float_Nonnull )by;

@end

@interface __Extension_Double: double

+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(double)self through:(double_Nonnull )through by:(double_Nonnull )by;
+ (/* mapped */ id<NSFastEnumeration>_Nonnull )stride:(double)self to:(double_Nonnull )to by:(double_Nonnull )by;

@end

@interface __Extension_UInt6416: uint64_t


@end

struct DispatchPredicate {
  int32_t __Value;
  DispatchPredicate onQueue;
  DispatchQueue *_Nonnull  __ValueForonQueue;
  DispatchPredicate onQueueAsBarrier;
  DispatchQueue *_Nonnull  __ValueForonQueueAsBarrier;
  DispatchPredicate notOnQueue;
  DispatchQueue *_Nonnull  __ValueFornotOnQueue;
  uint64_t hash;
  BOOL op_Equality;
  BOOL op_Inequality;
  void $Copy;
  void $Free;
  DispatchPredicate __onQueue;
  DispatchPredicate __onQueueAsBarrier;
  DispatchPredicate __notOnQueue;
  int32_t fValue;
  NSObject *fAssocValue;

};

#define DispatchPredicate___onQueue 0
#define DispatchPredicate___onQueueAsBarrier 1
#define DispatchPredicate___notOnQueue 2

@interface DispatchObject: NSObject

- (id_Nonnull )initWithRawValue:(dispatch_object_t_Nonnull )rawValue;

@end

@interface DispatchQueue: DispatchObject

- (id_Nonnull )initWithQueue:(dispatch_queue_t_Nonnull )queue;
- (id_Nonnull )initWithLabel:(NSString *_Nonnull )label attributes:(DispatchQueueAttributes_Nonnull )attributes target:(DispatchQueue *)target;

@end

struct DispatchWorkItemFlags {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct MachSendEvent {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct MemoryPressureEvent {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct ProcessEvent {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct TimerFlags {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct FileSystemEvent {
  void .ctor;
  uint64_t_Nonnull  rawValue;
  uint64_t_Nonnull  @p_rawValue;

};

struct DispatchData {
  int8_t @dummy;

};

struct DispatchDataIterator {
  int8_t @dummy;

};

struct DispatchQoS {
  void .ctor;
  void .ctor;
  QoSClass_Nonnull  qosClass;
  int64_t_Nonnull  relativePriority;
  DispatchQoS_Nonnull  background;
  DispatchQoS_Nonnull  utility;
  DispatchQoS_Nonnull  defaultQoS;
  DispatchQoS_Nonnull  userInitiated;
  DispatchQoS_Nonnull  userInteractive;
  DispatchQoS_Nonnull  unspecified;
  void .cctor;
  void $__initialize;
  QoSClass_Nonnull  @p_qosClass;
  int64_t_Nonnull  @p_relativePriority;
  DispatchQoS_Nonnull  @p_background;
  DispatchQoS_Nonnull  @p_utility;
  DispatchQoS_Nonnull  @p_defaultQoS;
  DispatchQoS_Nonnull  @p_userInitiated;
  DispatchQoS_Nonnull  @p_userInteractive;
  DispatchQoS_Nonnull  @p_unspecified;
  int64_t $__initialized;

};

struct DispatchQueueAttributes {
  void .ctor;
  dispatch_queue_attr_t_Nonnull  rawValue;
  DispatchQueueAttributes_Nonnull  serial;
  DispatchQueueAttributes_Nonnull  concurrent;
  void .cctor;
  void $__initialize;
  dispatch_queue_attr_t_Nonnull  @p_rawValue;
  DispatchQueueAttributes_Nonnull  @p_serial;
  DispatchQueueAttributes_Nonnull  @p_concurrent;
  int64_t $__initialized;

};

struct DispatchTime {
  void .ctor;
  DispatchTime_Nonnull  now;
  dispatch_time_t_Nonnull  rawValue;
  DispatchTime_Nonnull  distantFuture;
  DispatchTime_Nonnull  @p_distantFuture;
  dispatch_time_t_Nonnull  @p_rawValue;
  BOOL @p_distantFuture@Initialized;

};

struct DispatchWallTime {
  void .ctor;
  DispatchWallTime_Nonnull  now;
  dispatch_time_t_Nonnull  rawValue;
  DispatchWallTime_Nonnull  distantFuture;
  DispatchWallTime_Nonnull  @p_distantFuture;
  dispatch_time_t_Nonnull  @p_rawValue;
  BOOL @p_distantFuture@Initialized;

};

struct DispatchTimeInterval {
  int32_t __Value;
  DispatchTimeInterval seconds;
  int64_t_Nonnull  __ValueForseconds;
  DispatchTimeInterval milliseconds;
  int64_t_Nonnull  __ValueFormilliseconds;
  DispatchTimeInterval microseconds;
  int64_t_Nonnull  __ValueFormicroseconds;
  DispatchTimeInterval nanoseconds;
  int64_t_Nonnull  __ValueFornanoseconds;
  uint64_t hash;
  BOOL op_Equality;
  BOOL op_Inequality;
  void $Copy;
  void $Free;
  DispatchTimeInterval __seconds;
  DispatchTimeInterval __milliseconds;
  DispatchTimeInterval __microseconds;
  DispatchTimeInterval __nanoseconds;
  int32_t fValue;
  NSObject *fAssocValue;

};

#define DispatchTimeInterval___seconds 0
#define DispatchTimeInterval___milliseconds 1
#define DispatchTimeInterval___microseconds 2
#define DispatchTimeInterval___nanoseconds 3

@interface DictionaryHelper: NSObject

+ (/* mapped */ id<NSFastEnumeration>_Nonnull )Enumerate:(NSMutableDictionary *_Nonnull )val;

@end

@interface Range: NSObject <ICustomStringConvertible, ICustomDebugStringConvertible>

- (id_Nonnull )init:(Range *_Nonnull )x;
- (id_Nonnull )initWithStart:(int64_t_Nonnull )start end:(int64_t_Nonnull )end;
+ (BOOL_Nonnull )op_Equality:(Range *)lhs :(Range *)rhs;
- (BOOL_Nonnull )Equals:(Range *_Nonnull )rhs;
- (/* mapped */ id<NSFastEnumeration>_Nonnull )GetSequence;

@property (nonnull,assign) int64_t startIndex;
@property (nonnull,assign) int64_t endIndex;
@property (nonnull,readonly,assign) int64_t Item;
@property (nonnull,readonly,assign) int64_t length;
@property (nonnull,readonly,assign) NSRange nativeRange;

@end

@interface CharacterView: NSObject


@property (nonnull,readonly,assign) int64_t startIndex;
@property (nonnull,readonly,assign) int64_t endIndex;

@end

@interface UTF16CharacterView: CharacterView <ICustomDebugStringConvertible>


@property (nonnull,readonly,assign) int64_t endIndex;
@property (nonnull,readonly,assign) wchar_t Item;

@end

@interface UTF32CharacterView: CharacterView <ICustomDebugStringConvertible>


@property (nonnull,readonly,assign) int64_t endIndex;
@property (nonnull,readonly,assign) uint32_t Item;

@end

@interface UTF8CharacterView: CharacterView <ICustomDebugStringConvertible>


@property (nonnull,readonly,assign) int64_t endIndex;
@property (nonnull,readonly,assign) char Item;

@end

@interface __Extension_UnicodeScalar: wchar_t

+ (id<IStreamable>)op_Implicit:(wchar_t)value;
+ (NSString *_Nonnull )escape:(wchar_t)self asASCII:(BOOL_Nonnull )asASCII;
+ (BOOL_Nonnull )isASCII:(wchar_t)self;
+ (void)writeTo:(wchar_t)self :(id<IOutputStreamType>_Nonnull )target;
+ (uint32_t_Nonnull )value:(wchar_t)self;

@property (nonnull,readonly,assign) uint32_t value;

@end

@interface $anonymoustype$26: Bit

+ (Bit_Nonnull )predecessor:(Bit)self;
+ (Bit_Nonnull )successor:(Bit)self;
+ (NSString *_Nonnull )debugDescription:(Bit)self;

@property (nonnull,readonly,strong) NSString *debugDescription;

@end


// Globals 

extern BOOL_Nonnull  op_Equality(Bit_Nonnull  lhs, Bit_Nonnull  rhs);

extern BOOL_Nonnull  op_LessThan(Bit_Nonnull  lhs, Bit_Nonnull  rhs);

extern void dispatchPrecondition(DispatchPredicate_Nonnull  (^)()_Nonnull  condition);

extern int64_t_Nonnull  count(NSString *source);

extern int64_t_Nonnull  count(/* mapped */ NSMutableArray *source);

extern int64_t_Nonnull  count(id_Nonnull  * /* dynamicarray */ source);

extern int64_t_Nonnull  count(/* mapped */ id<NSFastEnumeration> source);

extern /* mapped */ NSMutableArray *_Nonnull  split(NSString *_Nonnull  elements, BOOL_Nonnull  (^)(wchar_t_Nonnull  )_Nonnull  isSeparator, int64_t_Nonnull  maxSplit, BOOL_Nonnull  allowEmptySlices);

extern /* mapped */ NSMutableArray *_Nonnull  split(NSString *_Nonnull  elements, NSString *_Nonnull  separator);

extern /* mapped */ NSMutableArray *_Nonnull  split(NSString *_Nonnull  elements, wchar_t_Nonnull  separator);

extern BOOL_Nonnull  startsWith(NSString *_Nonnull  s, NSString *_Nonnull  prefix);

extern /* mapped */ id<NSFastEnumeration>_Nonnull  sequence(id_Nonnull  first, id (^)(id_Nonnull  )_Nonnull  next);

extern void assert(BOOL_Nonnull  (^)()_Nonnull  condition, NSString *_Nonnull  (^)()_Nonnull  message, NSString *_Nonnull  file, uint16_t_Nonnull  line);

extern void assertionFailure(NSString *_Nonnull  (^)()_Nonnull  message, NSString *_Nonnull  file, uint16_t_Nonnull  line);

extern void debugPrint(NSObject *object, NSString *_Nonnull  separator, NSString *terminator);

extern void debugPrint(NSObject * * /* dynamicarray */ objects, NSString *_Nonnull  separator, NSString *terminator);

extern void fatalError(NSString *_Nonnull  (^)()_Nonnull  message, NSString *_Nonnull  file, uint32_t_Nonnull  line);

extern void precondition(BOOL_Nonnull  (^)()_Nonnull  condition, NSString *_Nonnull  (^)()_Nonnull  message, NSString *_Nonnull  file, uint16_t_Nonnull  line);

extern void preconditionFailure(NSString *_Nonnull  (^)()_Nonnull  message, NSString *_Nonnull  file, uint16_t_Nonnull  line);

extern void println(id * /* dynamicarray */ objects);

extern void print(NSObject *object, NSString *_Nonnull  separator, NSString *terminator);

extern void print(NSObject * * /* dynamicarray */ objects, NSString *_Nonnull  separator, NSString *terminator);

extern NSString *_Nonnull  readLine(BOOL_Nonnull  stripNewline);

extern void swap(id_Nonnull *a, id_Nonnull *b);

extern /* mapped */ id<NSFastEnumeration>_Nonnull  stride(int64_t_Nonnull  start, int64_t_Nonnull  end, int64_t_Nonnull  stride);

extern /* mapped */ id<NSFastEnumeration>_Nonnull  stride(double_Nonnull  start, double_Nonnull  end, double_Nonnull  stride);

extern void $$setArgV(NSString *_Nonnull  * /* dynamicarray */_Nonnull  args);

extern char * * /* dynamicarray */_Nonnull  __stringArrayToCStringArray(/* mapped */ NSMutableArray *_Nonnull  arcv);

extern int64_t_Nonnull  C_ARGC(void );

extern /* mapped */ NSMutableArray *_Nonnull  C_ARGV(void );

